// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pkg/apis/bundle/v1alpha1/cluster_bundle.proto

package v1alpha1 // import "github.com/GoogleCloudPlatform/k8s-cluster-bundle/pkg/apis/bundle/v1alpha1"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// All the components necessary for deploying (or re-deploying) the cluster.
type ClusterBundle struct {
	// API Version for the Bundle. Should have the form <namespace>/<phase>.
	ApiVersion string `protobuf:"bytes,1,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	// The Kubernetes `kind` for this object. Should be 'ClusterBundle'.
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// Kubernetes ObjectMeta proto.
	Metadata *ObjectMeta `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Spec for the ClusterBundle, which specifies the intended Kubernetes cluster
	// configuration.
	Spec                 *ClusterBundleSpec `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ClusterBundle) Reset()         { *m = ClusterBundle{} }
func (m *ClusterBundle) String() string { return proto.CompactTextString(m) }
func (*ClusterBundle) ProtoMessage()    {}
func (*ClusterBundle) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b30f666a9d42204, []int{0}
}
func (m *ClusterBundle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterBundle.Unmarshal(m, b)
}
func (m *ClusterBundle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterBundle.Marshal(b, m, deterministic)
}
func (m *ClusterBundle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterBundle.Merge(m, src)
}
func (m *ClusterBundle) XXX_Size() int {
	return xxx_messageInfo_ClusterBundle.Size(m)
}
func (m *ClusterBundle) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterBundle.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterBundle proto.InternalMessageInfo

func (m *ClusterBundle) GetApiVersion() string {
	if m != nil {
		return m.ApiVersion
	}
	return ""
}

func (m *ClusterBundle) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *ClusterBundle) GetMetadata() *ObjectMeta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ClusterBundle) GetSpec() *ClusterBundleSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

// A spec object that wraps the Cluster Bundle.
type ClusterBundleSpec struct {
	// The version of this cluster-bundle. Typically this should be a semantic-ver
	// string.
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// Configuration for the base OS images used for the nodes.
	ImageConfigs []*ImageConfig `protobuf:"bytes,2,rep,name=image_configs,json=imageConfigs,proto3" json:"image_configs,omitempty"`
	// Kubernetes cluster applications that are part of the bundle.
	ClusterApps []*ClusterApplication `protobuf:"bytes,3,rep,name=cluster_apps,json=clusterApps,proto3" json:"cluster_apps,omitempty"`
	// Keys for retrieving option defaults objects.
	OptionsDefaults      []*ClusterObjectKey `protobuf:"bytes,4,rep,name=options_defaults,json=optionsDefaults,proto3" json:"options_defaults,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ClusterBundleSpec) Reset()         { *m = ClusterBundleSpec{} }
func (m *ClusterBundleSpec) String() string { return proto.CompactTextString(m) }
func (*ClusterBundleSpec) ProtoMessage()    {}
func (*ClusterBundleSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b30f666a9d42204, []int{1}
}
func (m *ClusterBundleSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterBundleSpec.Unmarshal(m, b)
}
func (m *ClusterBundleSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterBundleSpec.Marshal(b, m, deterministic)
}
func (m *ClusterBundleSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterBundleSpec.Merge(m, src)
}
func (m *ClusterBundleSpec) XXX_Size() int {
	return xxx_messageInfo_ClusterBundleSpec.Size(m)
}
func (m *ClusterBundleSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterBundleSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterBundleSpec proto.InternalMessageInfo

func (m *ClusterBundleSpec) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ClusterBundleSpec) GetImageConfigs() []*ImageConfig {
	if m != nil {
		return m.ImageConfigs
	}
	return nil
}

func (m *ClusterBundleSpec) GetClusterApps() []*ClusterApplication {
	if m != nil {
		return m.ClusterApps
	}
	return nil
}

func (m *ClusterBundleSpec) GetOptionsDefaults() []*ClusterObjectKey {
	if m != nil {
		return m.OptionsDefaults
	}
	return nil
}

func init() {
	proto.RegisterType((*ClusterBundle)(nil), "pkg.apis.bundle.v1alpha1.ClusterBundle")
	proto.RegisterType((*ClusterBundleSpec)(nil), "pkg.apis.bundle.v1alpha1.ClusterBundleSpec")
}

func init() {
	proto.RegisterFile("pkg/apis/bundle/v1alpha1/cluster_bundle.proto", fileDescriptor_6b30f666a9d42204)
}

var fileDescriptor_6b30f666a9d42204 = []byte{
	// 397 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xcd, 0x8a, 0xdb, 0x30,
	0x14, 0x85, 0x71, 0x62, 0xfa, 0x23, 0x27, 0xb4, 0xd5, 0x4a, 0x64, 0xd3, 0x10, 0x5a, 0x08, 0xf9,
	0xb1, 0x49, 0xba, 0xe9, 0xae, 0x6d, 0x52, 0x28, 0x4d, 0x5b, 0x52, 0x5c, 0xda, 0x45, 0x37, 0x46,
	0x96, 0x15, 0x47, 0x63, 0xd9, 0x12, 0x96, 0x1c, 0x98, 0xc7, 0x99, 0xa7, 0x99, 0xd7, 0x1a, 0x2c,
	0x3b, 0xc9, 0x84, 0x41, 0x64, 0xe7, 0x7b, 0xf5, 0x9d, 0xe3, 0x7b, 0x2f, 0x07, 0xcc, 0x65, 0x96,
	0x06, 0x58, 0x32, 0x15, 0xc4, 0x55, 0x91, 0x70, 0x1a, 0x1c, 0x16, 0x98, 0xcb, 0x3d, 0x5e, 0x04,
	0x84, 0x57, 0x4a, 0xd3, 0x32, 0x6a, 0xfa, 0xbe, 0x2c, 0x85, 0x16, 0x10, 0xc9, 0x2c, 0xf5, 0x6b,
	0xdc, 0x6f, 0xdb, 0x47, 0x7c, 0xb0, 0xb0, 0x1a, 0x61, 0x29, 0x39, 0x23, 0x58, 0x33, 0x51, 0x5c,
	0x98, 0x0d, 0x66, 0x56, 0x49, 0x53, 0x47, 0x44, 0xe4, 0xb9, 0x28, 0x5a, 0x7a, 0x6a, 0xa5, 0x59,
	0x8e, 0xd3, 0x1a, 0x2e, 0x76, 0x2c, 0x6d, 0xe1, 0x89, 0x15, 0x16, 0xf1, 0x0d, 0x25, 0x3a, 0xca,
	0xa9, 0xc6, 0x0d, 0x3b, 0xba, 0x77, 0x40, 0x7f, 0xdd, 0x2c, 0xbb, 0x32, 0x30, 0x7c, 0x0b, 0x3c,
	0x2c, 0x59, 0x74, 0xa0, 0xa5, 0x62, 0xa2, 0x40, 0xce, 0xd0, 0x19, 0xbf, 0x0c, 0x01, 0x96, 0xec,
	0x5f, 0xd3, 0x81, 0x10, 0xb8, 0x19, 0x2b, 0x12, 0xd4, 0x31, 0x2f, 0xe6, 0x1b, 0x7e, 0x06, 0x2f,
	0x6a, 0xd3, 0x04, 0x6b, 0x8c, 0xba, 0x43, 0x67, 0xec, 0x2d, 0xdf, 0xf9, 0xb6, 0x6b, 0xf9, 0x5b,
	0x33, 0xc5, 0x2f, 0xaa, 0x71, 0x78, 0x52, 0xc1, 0x4f, 0xc0, 0x55, 0x92, 0x12, 0xe4, 0x1a, 0xf5,
	0xd4, 0xae, 0xbe, 0x98, 0xf6, 0x8f, 0xa4, 0x24, 0x34, 0xc2, 0xd1, 0x5d, 0x07, 0xbc, 0x79, 0xf2,
	0x06, 0x11, 0x78, 0x7e, 0xb9, 0xc9, 0xb1, 0x84, 0x1b, 0xd0, 0x7f, 0x7c, 0x3b, 0x85, 0x3a, 0xc3,
	0xee, 0xd8, 0x5b, 0xbe, 0xb7, 0xff, 0xf9, 0x7b, 0x8d, 0xaf, 0x0d, 0x1d, 0xf6, 0xd8, 0xb9, 0x50,
	0x70, 0x0b, 0x7a, 0xc7, 0xc4, 0x60, 0x29, 0x15, 0xea, 0x1a, 0xab, 0xd9, 0xd5, 0x25, 0xbe, 0x9c,
	0xd3, 0x11, 0x7a, 0xe4, 0xd4, 0x53, 0xf0, 0x2f, 0x78, 0x2d, 0x64, 0xdd, 0x56, 0x51, 0x42, 0x77,
	0xb8, 0xe2, 0x5a, 0x21, 0xd7, 0x98, 0x4e, 0xae, 0x9a, 0x36, 0xe7, 0xfd, 0x41, 0x6f, 0xc3, 0x57,
	0xad, 0xc7, 0xd7, 0xd6, 0x62, 0xf5, 0xf3, 0xff, 0x26, 0x65, 0x7a, 0x5f, 0xc5, 0x3e, 0x11, 0x79,
	0xf0, 0x4d, 0x88, 0x94, 0xd3, 0x35, 0x17, 0x55, 0xf2, 0x9b, 0x63, 0xbd, 0x13, 0x65, 0x1e, 0x64,
	0x1f, 0xd5, 0xbc, 0x1d, 0x64, 0xde, 0xa6, 0xc7, 0x96, 0xa6, 0xf8, 0x99, 0x89, 0xd0, 0x87, 0x87,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xf5, 0xb1, 0x7a, 0xdd, 0x47, 0x03, 0x00, 0x00,
}
