// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pkg/apis/bundle/v1alpha1/image_config.proto

package v1alpha1 // import "github.com/GoogleCloudPlatform/k8s-cluster-bundle/pkg/apis/bundle/v1alpha1"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Configuration for a base OS image used to configure the nodes.
type ImageConfig struct {
	// The name of this image configuration.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Script to run on VM startup to kick things off.
	//
	// Types that are valid to be assigned to InitData:
	//	*ImageConfig_InitScript
	//	*ImageConfig_InitScriptFile
	InitData isImageConfig_InitData `protobuf_oneof:"init_data"`
	// Envirnoment variables to set before startup to configure the init script.
	Env []*EnvVar `protobuf:"bytes,4,rep,name=env,proto3" json:"env,omitempty"`
	// The Base OS image to use for VM creation.
	BaseOsImage *File `protobuf:"bytes,5,opt,name=base_os_image,json=baseOsImage,proto3" json:"base_os_image,omitempty"`
	// Preloaded files used as part of bootstrap. The presence of these files is
	// purely informational.
	PreloadedFiles       []*PreloadedFile `protobuf:"bytes,6,rep,name=preloaded_files,json=preloadedFiles,proto3" json:"preloaded_files,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ImageConfig) Reset()         { *m = ImageConfig{} }
func (m *ImageConfig) String() string { return proto.CompactTextString(m) }
func (*ImageConfig) ProtoMessage()    {}
func (*ImageConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b42dcabe81d9a89, []int{0}
}
func (m *ImageConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImageConfig.Unmarshal(m, b)
}
func (m *ImageConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImageConfig.Marshal(b, m, deterministic)
}
func (m *ImageConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageConfig.Merge(m, src)
}
func (m *ImageConfig) XXX_Size() int {
	return xxx_messageInfo_ImageConfig.Size(m)
}
func (m *ImageConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ImageConfig proto.InternalMessageInfo

func (m *ImageConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type isImageConfig_InitData interface {
	isImageConfig_InitData()
}

type ImageConfig_InitScript struct {
	InitScript string `protobuf:"bytes,2,opt,name=init_script,json=initScript,proto3,oneof"`
}

type ImageConfig_InitScriptFile struct {
	InitScriptFile *File `protobuf:"bytes,3,opt,name=init_script_file,json=initScriptFile,proto3,oneof"`
}

func (*ImageConfig_InitScript) isImageConfig_InitData() {}

func (*ImageConfig_InitScriptFile) isImageConfig_InitData() {}

func (m *ImageConfig) GetInitData() isImageConfig_InitData {
	if m != nil {
		return m.InitData
	}
	return nil
}

func (m *ImageConfig) GetInitScript() string {
	if x, ok := m.GetInitData().(*ImageConfig_InitScript); ok {
		return x.InitScript
	}
	return ""
}

func (m *ImageConfig) GetInitScriptFile() *File {
	if x, ok := m.GetInitData().(*ImageConfig_InitScriptFile); ok {
		return x.InitScriptFile
	}
	return nil
}

func (m *ImageConfig) GetEnv() []*EnvVar {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *ImageConfig) GetBaseOsImage() *File {
	if m != nil {
		return m.BaseOsImage
	}
	return nil
}

func (m *ImageConfig) GetPreloadedFiles() []*PreloadedFile {
	if m != nil {
		return m.PreloadedFiles
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ImageConfig) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ImageConfig_OneofMarshaler, _ImageConfig_OneofUnmarshaler, _ImageConfig_OneofSizer, []interface{}{
		(*ImageConfig_InitScript)(nil),
		(*ImageConfig_InitScriptFile)(nil),
	}
}

func _ImageConfig_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ImageConfig)
	// init_data
	switch x := m.InitData.(type) {
	case *ImageConfig_InitScript:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.InitScript)
	case *ImageConfig_InitScriptFile:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InitScriptFile); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ImageConfig.InitData has unexpected type %T", x)
	}
	return nil
}

func _ImageConfig_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ImageConfig)
	switch tag {
	case 2: // init_data.init_script
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.InitData = &ImageConfig_InitScript{x}
		return true, err
	case 3: // init_data.init_script_file
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(File)
		err := b.DecodeMessage(msg)
		m.InitData = &ImageConfig_InitScriptFile{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ImageConfig_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ImageConfig)
	// init_data
	switch x := m.InitData.(type) {
	case *ImageConfig_InitScript:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.InitScript)))
		n += len(x.InitScript)
	case *ImageConfig_InitScriptFile:
		s := proto.Size(x.InitScriptFile)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// An environment variable specified for node startup.
type EnvVar struct {
	// Name of this environment variable. E.g., FOO_VAR. The name of the
	// environment variable should be unique within a node bootstrap
	// configuration.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The value to set for this environment variable.
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnvVar) Reset()         { *m = EnvVar{} }
func (m *EnvVar) String() string { return proto.CompactTextString(m) }
func (*EnvVar) ProtoMessage()    {}
func (*EnvVar) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b42dcabe81d9a89, []int{1}
}
func (m *EnvVar) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnvVar.Unmarshal(m, b)
}
func (m *EnvVar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnvVar.Marshal(b, m, deterministic)
}
func (m *EnvVar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnvVar.Merge(m, src)
}
func (m *EnvVar) XXX_Size() int {
	return xxx_messageInfo_EnvVar.Size(m)
}
func (m *EnvVar) XXX_DiscardUnknown() {
	xxx_messageInfo_EnvVar.DiscardUnknown(m)
}

var xxx_messageInfo_EnvVar proto.InternalMessageInfo

func (m *EnvVar) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EnvVar) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// A preloaded file is a file that must exist on the OS before cluster
// installation occurrs.
type PreloadedFile struct {
	// Name of the bootstrap file.
	// For example: `kubelet`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// An optional version for this file. Not all files will be versioned, but
	// some (like the kubelet binary) will.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// The actual path and hash representing this file.
	File                 *File    `protobuf:"bytes,3,opt,name=file,proto3" json:"file,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PreloadedFile) Reset()         { *m = PreloadedFile{} }
func (m *PreloadedFile) String() string { return proto.CompactTextString(m) }
func (*PreloadedFile) ProtoMessage()    {}
func (*PreloadedFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b42dcabe81d9a89, []int{2}
}
func (m *PreloadedFile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PreloadedFile.Unmarshal(m, b)
}
func (m *PreloadedFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PreloadedFile.Marshal(b, m, deterministic)
}
func (m *PreloadedFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreloadedFile.Merge(m, src)
}
func (m *PreloadedFile) XXX_Size() int {
	return xxx_messageInfo_PreloadedFile.Size(m)
}
func (m *PreloadedFile) XXX_DiscardUnknown() {
	xxx_messageInfo_PreloadedFile.DiscardUnknown(m)
}

var xxx_messageInfo_PreloadedFile proto.InternalMessageInfo

func (m *PreloadedFile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PreloadedFile) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *PreloadedFile) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

func init() {
	proto.RegisterType((*ImageConfig)(nil), "pkg.apis.bundle.v1alpha1.ImageConfig")
	proto.RegisterType((*EnvVar)(nil), "pkg.apis.bundle.v1alpha1.EnvVar")
	proto.RegisterType((*PreloadedFile)(nil), "pkg.apis.bundle.v1alpha1.PreloadedFile")
}

func init() {
	proto.RegisterFile("pkg/apis/bundle/v1alpha1/image_config.proto", fileDescriptor_7b42dcabe81d9a89)
}

var fileDescriptor_7b42dcabe81d9a89 = []byte{
	// 374 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x4d, 0x6b, 0xe3, 0x30,
	0x10, 0xcd, 0xf7, 0x92, 0x31, 0xc9, 0x2e, 0x62, 0x0f, 0x62, 0x0f, 0x8b, 0x37, 0x97, 0x0d, 0xb4,
	0xb1, 0x89, 0x7b, 0xe9, 0x39, 0xa1, 0x6d, 0x1a, 0x0a, 0x0d, 0x2e, 0xf4, 0xd0, 0x8b, 0x91, 0x6d,
	0xc5, 0x11, 0x91, 0x25, 0xd5, 0xb2, 0xfd, 0x97, 0xfb, 0x37, 0x8a, 0xe5, 0x84, 0xa6, 0x10, 0x43,
	0x6e, 0x7a, 0xa3, 0xf7, 0xde, 0x8c, 0x9e, 0x06, 0xae, 0xd4, 0x3e, 0x71, 0x89, 0x62, 0xda, 0x0d,
	0x0b, 0x11, 0x73, 0xea, 0x96, 0x73, 0xc2, 0xd5, 0x8e, 0xcc, 0x5d, 0x96, 0x92, 0x84, 0x06, 0x91,
	0x14, 0x5b, 0x96, 0x38, 0x2a, 0x93, 0xb9, 0x44, 0x58, 0xed, 0x13, 0xa7, 0x22, 0x3b, 0x35, 0xd9,
	0x39, 0x92, 0xff, 0x5c, 0x37, 0xda, 0xd4, 0x38, 0x88, 0x64, 0x9a, 0x4a, 0x51, 0xfb, 0x4c, 0x3e,
	0x3a, 0x60, 0x3d, 0x56, 0xf6, 0x4b, 0xe3, 0x8e, 0x10, 0xf4, 0x04, 0x49, 0x29, 0x6e, 0xdb, 0xed,
	0xe9, 0xd0, 0x37, 0x67, 0xf4, 0x0f, 0x2c, 0x26, 0x58, 0x1e, 0xe8, 0x28, 0x63, 0x2a, 0xc7, 0x9d,
	0xea, 0x6a, 0xd5, 0xf2, 0xa1, 0x2a, 0xbe, 0x98, 0x1a, 0x5a, 0xc3, 0xaf, 0x13, 0x4a, 0xb0, 0x65,
	0x9c, 0xe2, 0xae, 0xdd, 0x9e, 0x5a, 0xde, 0x5f, 0xa7, 0x69, 0x52, 0xe7, 0x9e, 0x71, 0xba, 0x6a,
	0xf9, 0xe3, 0x2f, 0x9f, 0xaa, 0x82, 0x3c, 0xe8, 0x52, 0x51, 0xe2, 0x9e, 0xdd, 0x9d, 0x5a, 0x9e,
	0xdd, 0x2c, 0xbf, 0x13, 0xe5, 0x2b, 0xc9, 0xfc, 0x8a, 0x8c, 0x16, 0x30, 0x0a, 0x89, 0xa6, 0x81,
	0xd4, 0x81, 0x09, 0x0b, 0xf7, 0x2f, 0x69, 0xee, 0x5b, 0x95, 0xe8, 0x59, 0x9b, 0x00, 0xd0, 0x06,
	0x7e, 0xaa, 0x8c, 0x72, 0x49, 0x62, 0x1a, 0x9b, 0x17, 0x68, 0x3c, 0x30, 0x33, 0xfc, 0x6f, 0x76,
	0xd9, 0x1c, 0x05, 0xc6, 0x6e, 0xac, 0x4e, 0xa1, 0x5e, 0x58, 0x30, 0x34, 0xa9, 0xc4, 0x24, 0x27,
	0x13, 0x0f, 0x06, 0xf5, 0xc4, 0x67, 0x33, 0xfe, 0x0d, 0xfd, 0x92, 0xf0, 0x82, 0xd6, 0xe9, 0xfa,
	0x35, 0x98, 0xbc, 0xc3, 0xe8, 0x5b, 0x87, 0xb3, 0x52, 0x0c, 0x3f, 0x4a, 0x9a, 0x69, 0x26, 0xc5,
	0x41, 0x7c, 0x84, 0xc8, 0x83, 0xde, 0xe5, 0x3f, 0xe1, 0x1b, 0xee, 0xe2, 0xe9, 0x6d, 0x9d, 0xb0,
	0x7c, 0x57, 0x84, 0x4e, 0x24, 0x53, 0xf7, 0x41, 0xca, 0x84, 0xd3, 0x25, 0x97, 0x45, 0xbc, 0xe1,
	0x24, 0xdf, 0xca, 0x2c, 0x75, 0xf7, 0xb7, 0x7a, 0x16, 0xf1, 0x42, 0xe7, 0x34, 0x9b, 0x1d, 0x56,
	0xac, 0x69, 0xe5, 0xc2, 0x81, 0xd9, 0xb2, 0x9b, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe4, 0x56,
	0x05, 0x52, 0xdc, 0x02, 0x00, 0x00,
}
